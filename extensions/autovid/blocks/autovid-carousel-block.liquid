{% assign raw_youtube_urls_string = block.settings.product.metafields.custom.youtube_videos_list.value %}
{% assign youtube_urls = raw_youtube_urls_string | parse_json %}
{% assign video_count = youtube_urls.size | default: 0 %}
{% assign youtube_urls_to_show = youtube_urls | slice: 0, video_count %}

<style>
  #autovid-carousel-block .slick-list{
     margin-right: -{{ block.settings.slide_gap | default: 10 }}px;
  }
  #autovid-carousel-block .slick-track {
    display: flex !important;
  }
  #autovid-carousel-block .slick-next:before,
  #autovid-carousel-block .slick-prev:before{
    color: #202020;
  }
</style>


{% if request.design_mode %}
  {%- if video_count < 3 -%}
    {%- comment -%} Show mock carousel (always 3 fake videos) {%- endcomment -%}
    <div id="autovid-carousel-block" style="padding-top: {{ block.settings.padding_top }}px; padding-bottom: {{ block.settings.padding_bottom }}px;">
     <p>This is an example mock videos carousel. To view your real videos on display, ensure more than 2 relevant videos was added via AutoVid dashboard for the product.</p>
      <div class="autovid-slick-carousel" style="max-width: {{ block.settings.max_width | default: 1500 }}px">
        {% assign mock_ids = "x7FUb4DmSmc,ScMzIvxBSi4,ScMzIvxBSi4" | split: "," %}
        {% for video_id in mock_ids %}
          <div class="autovid-slide">
            <div style="position:relative; padding-right: {{ block.settings.slide_gap }}px;">
              <iframe
                id="youtube-crl-player-mock-{{ forloop.index }}"
                src="https://www.youtube.com/embed/{{ video_id }}?enablejsapi=1"
                width="100%"
                height="{{ block.settings.video_height }}"
                title="Mock YouTube video"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                referrerpolicy="strict-origin-when-cross-origin"
                allowfullscreen></iframe>
            </div>
          </div>
        {% endfor %}
      </div>
    </div>
  {%- elsif video_count > 2 -%}
    {% assign show_real = true %}
  {%- endif -%}
{% else %}
  {%- if video_count > 2 -%}
    {% assign show_real = true %}
  {%- else -%}
    {% assign show_real = false %}
  {%- endif -%}
{% endif %}

{%- if show_real -%}
  <div id="autovid-carousel-block" style="padding-top: {{ block.settings.padding_top | default: 30 }}px; padding-bottom: {{ block.settings.padding_bottom | default: 30 }}px;">
    <div class="autovid-slick-carousel" style="max-width: {{ block.settings.max_width | default: 1500 }}px">
      {% for youtube_video_url in youtube_urls_to_show %}
        {% assign youtube_video_url = youtube_video_url | replace: "https://youtube.com", "https://www.youtube.com" %}

        {%- comment -%} Extract video ID (works for watch?v=, youtu.be, and embed) {%- endcomment -%}
        {% if youtube_video_url contains "watch?v=" %}
          {% assign video_id = youtube_video_url | split: 'v=' | last | split: '&' | first %}
        {% elsif youtube_video_url contains "youtu.be/" %}
          {% assign video_id = youtube_video_url | split: '/' | last | split: '?' | first %}
        {% elsif youtube_video_url contains "/embed/" %}
          {% assign video_id = youtube_video_url | split: '/embed/' | last | split: '?' | first %}
        {% else %}
          {% assign video_id = youtube_video_url %}
        {% endif %}

        <div class="autovid-slide">
          <div style="position:relative; padding-right: {{ block.settings.slide_gap | default: 10 }}px;">
            <iframe
              id="youtube-crl-player-{{ block.settings.product.id }}-{{ forloop.index }}"
              data-video-url="{{ youtube_video_url }}"
              src="https://www.youtube.com/embed/{{ video_id }}?enablejsapi=1"
              width="100%"
              height="{{ block.settings.video_height }}"
              title="YouTube video player"
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              referrerpolicy="strict-origin-when-cross-origin"
              allowfullscreen
            ></iframe>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
{% endif %}

{%- if request.design_mode or show_real -%}
  {% assign load_scripts = true %}
{%- else -%}
  {% assign load_scripts = false %}
{%- endif -%}

{%- if load_scripts  -%}
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css"/>
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css"/>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js"></script>
  <script src="https://www.youtube.com/iframe_api"></script>

  <script>
    let players = {};

    // Called by YouTube API when ready
    window.onYouTubeIframeAPIReady = function () {
      console.log('✅ YouTube IFrame API ready');
      initYouTubePlayers();
    };

    function initYouTubePlayers() {
      const iframes = document.querySelectorAll('iframe[id^="youtube-crl-player-"]');
      console.log('🎥 Found iframes:', iframes.length);

      iframes.forEach(iframe => {
        const iframeId = iframe.id;
        if (!players[iframeId]) {
          players[iframeId] = new YT.Player(iframeId, {
            events: {
              'onStateChange': onPlayerStateChange,
              'onError': onPlayerErrorCrl
            }
          });
        }
      });
    }

    function onPlayerStateChange(event) {
      const iframeId = event.target.getIframe().id;
      switch(event.data) {
        case YT.PlayerState.PLAYING:
          console.log(`▶ Playing: ${iframeId}`);
          triggerCustomActionCarousel(iframeId);
          break;
        case YT.PlayerState.PAUSED:
          console.log(`⏸ Paused: ${iframeId}`);
          break;
        case YT.PlayerState.ENDED:
          console.log(`⏹ Ended: ${iframeId}`);
          break;
      }
    }

    function onPlayerErrorCrl(event) {
      const iframeId = event.target.getIframe().id;
      console.error('❌ Error for', iframeId, event.data);
    }
    function triggerCustomActionCarousel(iframeId) {  
      console.log("trigger custom action");
      const shop_url = `{{shop_domain}}`;
      const api_url = `/a/autovid/update-videocount`

      const iframe = document.getElementById(iframeId);
      const videoUrl = iframe?.dataset.videoUrl;

      const payload = {
        productId: "{{ block.settings.product.id }}",
        videoUrl: videoUrl,
      };

      fetch(api_url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload)
      })
      .then(res => {
        if (!res.ok) throw new Error("Failed to update video count");
        return res.json();
      })
      .then(data => {
        console.log("Play count updated successfully", data);
      })
      .catch(err => {
        console.error("Error updating video count:", err);
      });
    }
    document.addEventListener("DOMContentLoaded", () => {
      // Slick init
      $('.autovid-slick-carousel').slick({
        slidesToShow: {{ block.settings.slides_to_show | default: 1 }},
        slidesToScroll: 1,
        arrows: {{ block.settings.show_arrows | default: false | json }},
        dots: {{ block.settings.show_dots | default: false | json }},
        autoplay: {{ block.settings.autoplay | default: false | json }},
        autoplaySpeed: {{ block.settings.autoplay_speed | default: 3000 }},
        infinite: {{ block.settings.loop | default: false | json }},
        responsive: [
          { breakpoint: 1024, settings: { slidesToShow: {{ block.settings.slides_to_show | default: 1 }} } },
          { breakpoint: 600, settings: { slidesToShow: 1 } },
          { breakpoint: 480, settings: { slidesToShow: 1 } }
        ]
      });

      // Re-init players after slick initializes (important for cloned slides)
      setTimeout(initYouTubePlayers, 800);
    });
  </script>
{% endif %}



{% schema %}
{
  "name": "AutoVid Video Carousel",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Product",
      "autofill": true
    },
    {
      "type": "number",
      "id": "slides_to_show",
      "label": "Slides to show at once",
      "default": 1
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show pagination dots",
      "default": true
    },
     {
        "type": "number",
        "id": "slide_gap",
        "label": "Gap between slides (px)",
        "default": 10
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay carousel",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "Infinte Loop",
      "default": false
    },
    {
      "type": "number",
      "id": "autoplay_speed",
      "label": "Autoplay speed (ms)",
      "default": 3000
    },
    {
      "type": "number",
      "id": "max_width",
      "label": "Maximum carousel width (px)",
      "default": 1400
    },
   {
      "type": "range",
      "id": "video_height",
      "label": "YouTube Video Height (px)",
      "min": 250,
      "max": 800,
      "step": 50,
      "unit": "px",
      "default": 350
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Top padding (px)",
      "min": 0,
      "max": 200,
      "step": 10,
      "unit": "px",
      "default": 30
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Bottom padding (px)",
      "min": 0,
      "max": 200,
      "step": 10,
      "unit": "px",
      "default": 30
    }
  ]
}
{% endschema %}
