{% assign raw_youtube_url = block.settings.product.metafields.custom.youtube_demo_video.value %}
{% if request.design_mode %}
  {% if raw_youtube_url == blank or raw_youtube_url == nil %}
    <p>This is an example mock video. To view your real video on display, open your product page and ensure a relevant video was added via AutoVid dashboard.</p>
    {% assign raw_youtube_url = "https://youtube.com/embed/x7FUb4DmSmc" %}
  {% endif %}
{% endif %}

{% assign youtube_video_url = raw_youtube_url | replace: "https://youtube.com", "https://www.youtube.com" %}

{% assign youtube_summary = block.settings.product.metafields.custom.youtube_demo_summary.value %}
{% assign shop_domain = shop.domain %}

{% if block.settings.custom_css %}
  <style>
    {{ block.settings.custom_css }}
  </style>
{% endif %}
{% assign alignment_style = '' %}
{% if block.settings.alignment == 'center' %}
  {% assign alignment_style = 'margin-left: auto; margin-right: auto;' %}
{% elsif block.settings.alignment == 'left' %}
  {% assign alignment_style = 'margin-right: auto;' %}
{% elsif block.settings.alignment == 'right' %}
  {% assign alignment_style = 'margin-left: auto;' %}
{% endif %}
{% if youtube_video_url and youtube_video_url contains "youtube.com" %}
  <div id="autovid--video-block" style="padding-top: {{ block.settings.padding_top }}px; padding-bottom: {{ block.settings.padding_bottom }}px; background-color: {{ block.settings.background }};">
   <div class="block-container-width page-width" id="autovid--video-block-container" >
    <div id="autovid--video-container"
     style="max-width: {{ block.settings.max_width }}; {{ alignment_style }}"
     onclick="console.log('User clicked on video container')">
      <iframe
      id="youtube-player-{{ block.settings.product.id }}"
      width="100%"
      height="{{ block.settings.video_height }}"
      src={{ youtube_video_url }}{% if youtube_video_url contains '?' %}&enablejsapi=1{% else %}?enablejsapi=1{% endif %}
       title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
    </div>
    {% if block.settings.show_summary and youtube_summary %}
      <div id="autovid-video-summary">
        <p>{{ youtube_summary }}</p>
      </div>
    {% endif %}
    </div>
  </div>
{% endif %}

{% assign page_handle = '' %}
{% if template.name contains 'product' %}
  {% assign page_handle = product.handle %}
{% elsif template.name contains 'collection' %}
  {% assign page_handle = collection.handle %}
{% elsif template.name contains 'page' %}
  {% assign page_handle = page.handle %}
{% else %}
  {% assign page_handle = template.name %}
{% endif %}

<script>
  // --- Shared global setup ---
  window.autovidPlayers = window.autovidPlayers || {};

  // --- Player setup for this block ---
  function autovidInitSingleVideo() {
    const iframe = document.getElementById("youtube-player-{{ block.id }}");
    if (!iframe || window.autovidPlayers[iframe.id]) return;

    // ✅ Now safe because API is loaded (YT.Player available)
    window.autovidPlayers[iframe.id] = new YT.Player(iframe.id, {
      events: {
        'onStateChange': autovidOnStateChange,
        'onError': autovidOnError
      }
    });
  }

  function autovidOnStateChange(event) {
    const iframeId = event.target.getIframe().id;
    const playerState = event.data;
    if (playerState === YT.PlayerState.PLAYING) {
      console.log("▶️ Playing single video:", iframeId);
      autovidTriggerPlayEvent(iframeId);
    } else if (playerState === YT.PlayerState.ENDED) {
      console.log("⏹ Ended:", iframeId);
    }
  }

  function autovidOnError(event) {
    console.error("❌ YT Player error:", event.data);
  }

  function autovidTriggerPlayEvent(iframeId) {
    const iframe = document.getElementById(iframeId);
    const videoUrl = iframe?.src?.split("?")[0];
    const payload = {
      productId: "{{ block.settings.product.id }}",
      videoUrl
    };

    fetch(`/a/autovid/update-videocount`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    })
      .then(res => res.json())
      .then(data => console.log("✅ Play count updated:", data))
      .catch(err => console.error("Error updating play count:", err));
  }

  // --- Shared global YT API callback ---
  window.onYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady || function () {
    console.log("✅ YouTube API ready — initializing players");
    // Run init for all single blocks waiting for API
    const allIframes = document.querySelectorAll("[id^='youtube-player-']");
    allIframes.forEach(iframe => {
      if (!window.autovidPlayers[iframe.id]) {
        window.autovidPlayers[iframe.id] = new YT.Player(iframe.id, {
          events: {
            'onStateChange': autovidOnStateChange,
            'onError': autovidOnError
          }
        });
      }
    });
  };

  // --- Load YT API only once ---
  document.addEventListener("DOMContentLoaded", () => {
    if (window.YT && YT.Player) {
      autovidInitSingleVideo();
    } else {
      if (!document.querySelector('script[src="https://www.youtube.com/iframe_api"]')) {
        const tag = document.createElement("script");
        tag.src = "https://www.youtube.com/iframe_api";
        document.body.appendChild(tag);
      }
      // Wait until API ready (handled globally)
    }
  });
</script>





{% schema %}
{
  "name": "AutoVid Video Block",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Product",
      "autofill": true
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Max Width (e.g., 800px or 90%)",
      "default": "800px"
    },
    {
      "type": "number",
      "id": "video_height",
      "label": "Video Height (px)",
      "default": 315
    },
    {
      "type": "number",
      "id": "padding_top",
      "label": "Padding Top (px)",
      "default": 20
    },
    {
      "type": "number",
      "id": "padding_bottom",
      "label": "Padding Bottom (px)",
      "default": 20
    },
    {
      "type": "select",
      "id": "alignment",
      "label": "Video Alignment",
      "default": "center",
      "options": [
        { "value": "left", "label": "Left" },
        { "value": "center", "label": "Center" },
        { "value": "right", "label": "Right" }
      ]
    },
    {
      "type": "checkbox",
      "id": "show_summary",
      "label": "Show YouTube Summary",
      "default": false
    },
    {
      "type": "color",
      "id": "background",
      "label": "Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "textarea",
      "id": "custom_css",
      "label": "Custom CSS",
      "info": "Optional CSS to apply styles to this block. Do not include <style> tags."
    }
  ]
}
{% endschema %}